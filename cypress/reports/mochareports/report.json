{
  "stats": {
    "suites": 23,
    "tests": 132,
    "passes": 130,
    "pending": 0,
    "failures": 2,
    "start": "2021-11-30T11:03:30.443Z",
    "end": "2021-11-30T11:09:46.643Z",
    "duration": 235185,
    "testsRegistered": 132,
    "passPercent": 98.48484848484848,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f825d878-4697-4781-8fe3-0c634fefda37",
      "title": "",
      "fullFile": "cypress/integration/1-getting-started/todo.spec.js",
      "file": "cypress/integration/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a74bf191-98dd-4fe3-93dc-12ae4643c69c",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 897,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "fcb31183-c9c2-48fb-a925-4fa2cd416241",
              "parentUUID": "a74bf191-98dd-4fe3-93dc-12ae4643c69c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "1a74a96e-a2f2-482f-a5ef-3bf8c571ef1a",
              "parentUUID": "a74bf191-98dd-4fe3-93dc-12ae4643c69c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "3c06726b-8009-4286-a14b-f1f0074ea609",
              "parentUUID": "a74bf191-98dd-4fe3-93dc-12ae4643c69c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4c998ec2-bd77-40af-b674-88fc9f91f435",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 444,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "0e47f065-39d8-4220-8279-dbac5b17d26c",
                  "parentUUID": "4c998ec2-bd77-40af-b674-88fc9f91f435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 396,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "f14b7f41-b35d-4efe-a1f0-495b3c896c54",
                  "parentUUID": "4c998ec2-bd77-40af-b674-88fc9f91f435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "3e1ca2ed-6a47-400a-b818-e2d127d321a4",
                  "parentUUID": "4c998ec2-bd77-40af-b674-88fc9f91f435",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e47f065-39d8-4220-8279-dbac5b17d26c",
                "f14b7f41-b35d-4efe-a1f0-495b3c896c54",
                "3e1ca2ed-6a47-400a-b818-e2d127d321a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "fcb31183-c9c2-48fb-a925-4fa2cd416241",
            "1a74a96e-a2f2-482f-a5ef-3bf8c571ef1a",
            "3c06726b-8009-4286-a14b-f1f0074ea609"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1708,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "63eae2fc-e40b-469e-b945-ba1b2533e0db",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/actions.spec.js",
      "file": "cypress/integration/2-advanced-examples/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 5870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "6e16f375-17c6-4393-8ba0-f264d2677931",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "510dd0e4-8dea-4cba-b7a0-2558d7e0eca1",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "0ebeacdf-88cc-4f06-b3db-8aca5c8c68f1",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 608,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "21b4e62d-f79d-40f6-bf10-fa167096790f",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "2242afb7-54c9-410d-b235-4987315ce112",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "f22907f3-a3f2-4be1-ae42-82055d0dcf21",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "ce9ccf18-8fee-4021-9d5e-6516138b9e9a",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "56dda3c4-454b-474d-a8cd-e63559cc452d",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "633d8dac-aac6-4e51-b94f-ca1044b8264f",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "3149013c-1f76-4a9d-90e8-43671de4c977",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "bd6eca7f-c020-4f75-9344-1da8e0dc874c",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "fc6f9c81-08f7-4dc1-9438-f65bae7939b8",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "52838968-04f4-48de-b646-a8c039245991",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "a09b5712-291f-45c8-86b0-2ab3fe35f748",
              "parentUUID": "86b141c7-69f2-4da3-b3cf-84ad185ac68c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e16f375-17c6-4393-8ba0-f264d2677931",
            "510dd0e4-8dea-4cba-b7a0-2558d7e0eca1",
            "0ebeacdf-88cc-4f06-b3db-8aca5c8c68f1",
            "21b4e62d-f79d-40f6-bf10-fa167096790f",
            "2242afb7-54c9-410d-b235-4987315ce112",
            "f22907f3-a3f2-4be1-ae42-82055d0dcf21",
            "ce9ccf18-8fee-4021-9d5e-6516138b9e9a",
            "56dda3c4-454b-474d-a8cd-e63559cc452d",
            "633d8dac-aac6-4e51-b94f-ca1044b8264f",
            "3149013c-1f76-4a9d-90e8-43671de4c977",
            "bd6eca7f-c020-4f75-9344-1da8e0dc874c",
            "fc6f9c81-08f7-4dc1-9438-f65bae7939b8",
            "52838968-04f4-48de-b646-a8c039245991",
            "a09b5712-291f-45c8-86b0-2ab3fe35f748"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9a3d5fd9-709d-4153-b931-ef2ccc8415ef",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/aliasing.spec.js",
      "file": "cypress/integration/2-advanced-examples/aliasing.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "26bb968a-09ec-4e74-9a9c-60e126e4ca85",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 596,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn'); // when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "eb879590-4bd5-4199-9f94-d2589fab7629",
              "parentUUID": "26bb968a-09ec-4e74-9a9c-60e126e4ca85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 7102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "87dcd3f5-dd4a-4288-b953-a4531b153161",
              "parentUUID": "26bb968a-09ec-4e74-9a9c-60e126e4ca85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb879590-4bd5-4199-9f94-d2589fab7629",
            "87dcd3f5-dd4a-4288-b953-a4531b153161"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2fc3d17c-d1cc-41e9-86d1-328b82bc92f1",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/assertions.spec.js",
      "file": "cypress/integration/2-advanced-examples/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c53a6c88-ff14-48f0-ae3b-baa7c563c572",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58b10ab5-be5a-454e-a22f-67ed18c0ef4a",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 676,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "c1df06b2-e9c8-4094-bccb-2da2b98f5e36",
                  "parentUUID": "58b10ab5-be5a-454e-a22f-67ed18c0ef4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "390b402a-4206-4aef-8d35-5d5984ad8085",
                  "parentUUID": "58b10ab5-be5a-454e-a22f-67ed18c0ef4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1df06b2-e9c8-4094-bccb-2da2b98f5e36",
                "390b402a-4206-4aef-8d35-5d5984ad8085"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 855,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "9b83d79c-4f9f-40dc-8dca-afc2185f84b4",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  const texts = $p.map((i, el) => Cypress.$(el).text()); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "e77b40a0-3dd6-491d-81c3-29fa9559c187",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "62ded8a8-2876-4ec8-ab7a-39888724277d",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "1cacd8a2-fc5d-4302-a0a9-e445d9004189",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "03cf46f9-9f07-4fd9-96e7-3c2bf43a51bb",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "619bd3c5-764e-41e7-9548-578cd575752b",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1634,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "d6cf7ae3-f7d9-4a83-aa13-8c0734d97192",
                  "parentUUID": "6896f964-0b2d-40db-9bc5-2e4a76657d28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b83d79c-4f9f-40dc-8dca-afc2185f84b4",
                "e77b40a0-3dd6-491d-81c3-29fa9559c187",
                "62ded8a8-2876-4ec8-ab7a-39888724277d",
                "1cacd8a2-fc5d-4302-a0a9-e445d9004189",
                "03cf46f9-9f07-4fd9-96e7-3c2bf43a51bb",
                "619bd3c5-764e-41e7-9548-578cd575752b",
                "d6cf7ae3-f7d9-4a83-aa13-8c0734d97192"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2592,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "14b23f51-4be2-4108-899e-35396791f710",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/connectors.spec.js",
      "file": "cypress/integration/2-advanced-examples/connectors.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "21cd9637-5377-4b2a-9c02-fae2801927e5",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "e5dd5d86-0d14-4091-8112-15d2172efca2",
              "parentUUID": "21cd9637-5377-4b2a-9c02-fae2801927e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li') // calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "a8fa0b14-c181-411d-a39e-92ebad9e24b7",
              "parentUUID": "21cd9637-5377-4b2a-9c02-fae2801927e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\n// https://on.cypress.io/invoke\ncy.get('.connectors-div').should('be.hidden') // call the jquery method 'show' on the 'div.container'\n.invoke('show').should('be.visible');",
              "err": {},
              "uuid": "c1228aed-5c4e-4eb7-8e0b-c09cf5ec1477",
              "parentUUID": "21cd9637-5377-4b2a-9c02-fae2801927e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "ea4c0753-a28f-4b8b-a8b4-faf8740766e0",
              "parentUUID": "21cd9637-5377-4b2a-9c02-fae2801927e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "84b20194-c381-4795-b315-bfc652b996e7",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "b270d9c2-582e-4d16-8f64-3548f0093d92",
                  "parentUUID": "84b20194-c381-4795-b315-bfc652b996e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 151,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "d39e8296-584d-45d4-9a24-f6edc8a015e9",
                  "parentUUID": "84b20194-c381-4795-b315-bfc652b996e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 162,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "0d847bed-7873-4d09-bbc9-2ceba5be39ee",
                  "parentUUID": "84b20194-c381-4795-b315-bfc652b996e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "452ba995-9d7c-4e71-a95a-7352d1380e16",
                  "parentUUID": "84b20194-c381-4795-b315-bfc652b996e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b270d9c2-582e-4d16-8f64-3548f0093d92",
                "d39e8296-584d-45d4-9a24-f6edc8a015e9",
                "0d847bed-7873-4d09-bbc9-2ceba5be39ee",
                "452ba995-9d7c-4e71-a95a-7352d1380e16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 675,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "e5dd5d86-0d14-4091-8112-15d2172efca2",
            "a8fa0b14-c181-411d-a39e-92ebad9e24b7",
            "c1228aed-5c4e-4eb7-8e0b-c09cf5ec1477",
            "ea4c0753-a28f-4b8b-a8b4-faf8740766e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "601c2e23-7d9c-4fe8-9d55-3aeccccc59f1",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/cookies.spec.js",
      "file": "cypress/integration/2-advanced-examples/cookies.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6607df53-9bfb-4bea-bd59-55c072a7daae",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click(); // cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "a7a25301-d952-430b-8a9b-5c8ec23c6830",
              "parentUUID": "6607df53-9bfb-4bea-bd59-55c072a7daae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies",
              "timedOut": null,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click(); // cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "9ddaf6ce-9607-41f8-af24-93dbd6e6cd11",
              "parentUUID": "6607df53-9bfb-4bea-bd59-55c072a7daae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar'); // cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "af280b9c-a3b2-41d3-a8b5-0b4d0f5be909",
              "parentUUID": "6607df53-9bfb-4bea-bd59-55c072a7daae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC'); // cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "e7d2159f-2710-484e-9ac8-7cdb905b00d9",
              "parentUUID": "6607df53-9bfb-4bea-bd59-55c072a7daae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1); // cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "74fee757-0eaa-4865-9ffc-d1f84a10e3a0",
              "parentUUID": "6607df53-9bfb-4bea-bd59-55c072a7daae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7a25301-d952-430b-8a9b-5c8ec23c6830",
            "9ddaf6ce-9607-41f8-af24-93dbd6e6cd11",
            "af280b9c-a3b2-41d3-a8b5-0b4d0f5be909",
            "e7d2159f-2710-484e-9ac8-7cdb905b00d9",
            "74fee757-0eaa-4865-9ffc-d1f84a10e3a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1599,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "516f9a4f-23ed-45e9-8f76-6cdfc3a2f561",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/cypress_api.spec.js",
      "file": "cypress/integration/2-advanced-examples/cypress_api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0cb8a8c-51b1-498b-bfe8-f5d93f63a37b",
          "title": "Cypress.Commands",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".add() - create a custom command",
              "fullTitle": "Cypress.Commands .add() - create a custom command",
              "timedOut": null,
              "duration": 854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log'; // log the subject to the console\n  // @ts-ignore TS7017\n  console[method]('The subject is', subject); // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n}); // @ts-ignore TS2339\ncy.get('button').console('info').then($button => {// subject is still $button\n});",
              "err": {},
              "uuid": "b782eca0-4f55-49fc-ad79-d872ae1f2fc5",
              "parentUUID": "a0cb8a8c-51b1-498b-bfe8-f5d93f63a37b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b782eca0-4f55-49fc-ad79-d872ae1f2fc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 854,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0eaaabd1-2af1-41b3-bfc5-61692968240c",
          "title": "Cypress.Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".debug() - enable or disable debugging",
              "fullTitle": "Cypress.Cookies .debug() - enable or disable debugging",
              "timedOut": null,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Cookies.debug(true); // Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
              "err": {},
              "uuid": "a7365cf7-0f6a-45fb-a6b4-b6f48be7beaf",
              "parentUUID": "0eaaabd1-2af1-41b3-bfc5-61692968240c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".preserveOnce() - preserve cookies by key",
              "fullTitle": "Cypress.Cookies .preserveOnce() - preserve cookies by key",
              "timedOut": null,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// normally cookies are reset after each test\ncy.getCookie('fakeCookie').should('not.be.ok'); // preserving a cookie will not clear it when\n// the next test starts\ncy.setCookie('lastCookie', '789XYZ');\nCypress.Cookies.preserveOnce('lastCookie');",
              "err": {},
              "uuid": "f87a581b-1f00-41d9-a300-bffe56699a5a",
              "parentUUID": "0eaaabd1-2af1-41b3-bfc5-61692968240c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".defaults() - set defaults for all cookies",
              "fullTitle": "Cypress.Cookies .defaults() - set defaults for all cookies",
              "timedOut": null,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// now any cookie with the name 'session_id' will\n// not be cleared before each new test runs\nCypress.Cookies.defaults({\n  preserve: 'session_id'\n});",
              "err": {},
              "uuid": "50cfd5a3-1d1a-460f-84a8-b0f6f82fbc94",
              "parentUUID": "0eaaabd1-2af1-41b3-bfc5-61692968240c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7365cf7-0f6a-45fb-a6b4-b6f48be7beaf",
            "f87a581b-1f00-41d9-a300-bffe56699a5a",
            "50cfd5a3-1d1a-460f-84a8-b0f6f82fbc94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8d6a5ee-c40a-4422-83a8-37a0152ee04d",
          "title": "Cypress.arch",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get CPU architecture name of underlying OS",
              "fullTitle": "Cypress.arch Get CPU architecture name of underlying OS",
              "timedOut": null,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
              "err": {},
              "uuid": "d6ed03e3-a7ec-4760-8f35-08c5721eebfc",
              "parentUUID": "a8d6a5ee-c40a-4422-83a8-37a0152ee04d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6ed03e3-a7ec-4760-8f35-08c5721eebfc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f44a85db-4497-4e39-a6e0-228a74135ec3",
          "title": "Cypress.config()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get and set configuration options",
              "fullTitle": "Cypress.config() Get and set configuration options",
              "timedOut": null,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000); // this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
              "err": {},
              "uuid": "7e9232cb-124d-4210-80a9-389e1ada7ce3",
              "parentUUID": "f44a85db-4497-4e39-a6e0-228a74135ec3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e9232cb-124d-4210-80a9-389e1ada7ce3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 176,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68325685-e952-41f4-854d-a0c1d0375154",
          "title": "Cypress.dom",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".isHidden() - determine if a DOM element is hidden",
              "fullTitle": "Cypress.dom .isHidden() - determine if a DOM element is hidden",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0); // our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
              "err": {},
              "uuid": "a74f2af6-dd59-47ff-a1a2-d2e7398ee872",
              "parentUUID": "68325685-e952-41f4-854d-a0c1d0375154",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a74f2af6-dd59-47ff-a1a2-d2e7398ee872"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 160,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bcc4252e-bd06-4b5a-95db-f8a0faaec370",
          "title": "Cypress.env()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get environment variables",
              "fullTitle": "Cypress.env() Get environment variables",
              "timedOut": null,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n}); // get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local'); // set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/'); // get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
              "err": {},
              "uuid": "dc2bb8c7-5d56-48d4-b070-d1a9a6497d44",
              "parentUUID": "bcc4252e-bd06-4b5a-95db-f8a0faaec370",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc2bb8c7-5d56-48d4-b070-d1a9a6497d44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0686788-7de6-47cb-a596-e5c15f6df7c7",
          "title": "Cypress.log",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Control what is printed to the Command Log",
              "fullTitle": "Cypress.log Control what is printed to the Command Log",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/cypress-log",
              "err": {},
              "uuid": "292969f2-683d-4eb5-8683-62a9cff27d59",
              "parentUUID": "f0686788-7de6-47cb-a596-e5c15f6df7c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "292969f2-683d-4eb5-8683-62a9cff27d59"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1774b5b7-5e49-4dcb-a9cd-680cda2e28e1",
          "title": "Cypress.platform",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get underlying OS name",
              "fullTitle": "Cypress.platform Get underlying OS name",
              "timedOut": null,
              "duration": 148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
              "err": {},
              "uuid": "6670f6c3-71ff-4913-b90c-89dc6b793d6d",
              "parentUUID": "1774b5b7-5e49-4dcb-a9cd-680cda2e28e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6670f6c3-71ff-4913-b90c-89dc6b793d6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 148,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5134cbff-77ba-49bd-9e3e-751439a09bc5",
          "title": "Cypress.version",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current version of Cypress being run",
              "fullTitle": "Cypress.version Get current version of Cypress being run",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
              "err": {},
              "uuid": "386397db-5272-4846-a2fb-224fad83ac1f",
              "parentUUID": "5134cbff-77ba-49bd-9e3e-751439a09bc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "386397db-5272-4846-a2fb-224fad83ac1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8950d628-e2c1-4a80-ae35-7406ca5ee7db",
          "title": "Cypress.spec",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current spec information",
              "fullTitle": "Cypress.spec Get current spec information",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
              "err": {},
              "uuid": "95382188-b101-4170-a520-e98ab957d0fe",
              "parentUUID": "8950d628-e2c1-4a80-ae35-7406ca5ee7db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95382188-b101-4170-a520-e98ab957d0fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 163,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "23aa08a5-5e5b-47b8-80d2-3a2f35b2bee8",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/files.spec.js",
      "file": "cypress/integration/2-advanced-examples/files.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4ff421f8-a4d7-470e-8815-49497b68f7df",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "1797292e-a508-43b5-83d9-14c3993d4fb9",
              "parentUUID": "4ff421f8-a4d7-470e-8815-49497b68f7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample); // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "23c2394a-d7cb-458a-8f1b-0c7f94565352",
              "parentUUID": "4ff421f8-a4d7-470e-8815-49497b68f7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile('cypress.json').then(json => {\n  expect(json).to.be.an('object');\n});",
              "err": {},
              "uuid": "6b3d7f5e-4ad2-48f1-a68e-bb1af22a7411",
              "parentUUID": "4ff421f8-a4d7-470e-8815-49497b68f7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n}); // JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "97785f1b-7b41-4eca-93e7-c8618edfb498",
              "parentUUID": "4ff421f8-a4d7-470e-8815-49497b68f7df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1797292e-a508-43b5-83d9-14c3993d4fb9",
            "23c2394a-d7cb-458a-8f1b-0c7f94565352",
            "6b3d7f5e-4ad2-48f1-a68e-bb1af22a7411",
            "97785f1b-7b41-4eca-93e7-c8618edfb498"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "49b25fac-f59f-482b-8590-0efa05082bf6",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/local_storage.spec.js",
      "file": "cypress/integration/2-advanced-examples/local_storage.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0e1b6a8e-2973-429e-b133-cd634511894d",
          "title": "Local Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in local storage",
              "fullTitle": "Local Storage cy.clearLocalStorage() - clear all data in local storage",
              "timedOut": null,
              "duration": 1061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // clearLocalStorage() yields the localStorage object\ncy.clearLocalStorage().should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // Clear key matching string in Local Storage\ncy.clearLocalStorage('prop1').should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.eq('blue');\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // Clear keys matching regex in Local Storage\ncy.clearLocalStorage(/prop1|2/).should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "34a24249-2c3f-4cba-b45f-cf83208aa6b2",
              "parentUUID": "0e1b6a8e-2973-429e-b133-cd634511894d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34a24249-2c3f-4cba-b45f-cf83208aa6b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1061,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "af43ba4e-5722-457f-9e92-037b938184fc",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/location.spec.js",
      "file": "cypress/integration/2-advanced-examples/location.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0e51fc9-d825-422e-a3b9-a0f77bae1cba",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "27511ea5-fabd-4f27-897f-9d65025d2b50",
              "parentUUID": "a0e51fc9-d825-422e-a3b9-a0f77bae1cba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "1e503ca4-2d67-4669-8134-f37246b29ee4",
              "parentUUID": "a0e51fc9-d825-422e-a3b9-a0f77bae1cba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "6c46c723-4268-4797-ad6a-09b99d625926",
              "parentUUID": "a0e51fc9-d825-422e-a3b9-a0f77bae1cba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27511ea5-fabd-4f27-897f-9d65025d2b50",
            "1e503ca4-2d67-4669-8134-f37246b29ee4",
            "6c46c723-4268-4797-ad6a-09b99d625926"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 928,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "02421b03-7337-42fd-ac9b-dda05c2e2d6d",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/misc.spec.js",
      "file": "cypress/integration/2-advanced-examples/misc.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f784cd24-ddd9-4d7f-a3ae-2fb8c926ea54",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 1085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(() => {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end(); // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "7030e053-a840-4d23-ac4e-2a0890dfba43",
              "parentUUID": "f784cd24-ddd9-4d7f-a3ae-2fb8c926ea54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 2686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`); // on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n} // cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\n\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec('print cypress.json').its('stderr').should('be.empty');\n} else {\n  cy.exec('cat cypress.json').its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "7fe93e87-a374-4773-b421-cd2045158630",
              "parentUUID": "f784cd24-ddd9-4d7f-a3ae-2fb8c926ea54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "e584e4ed-2e85-4e8a-8fa9-d57a6684e5a2",
              "parentUUID": "f784cd24-ddd9-4d7f-a3ae-2fb8c926ea54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "76c6a1ff-02c3-4cd3-9c71-9ed01293e2ea",
              "parentUUID": "f784cd24-ddd9-4d7f-a3ae-2fb8c926ea54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c55c1718-7245-4826-97ad-5f23b2171208",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 3067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "5c26254e-101e-437a-b672-406ae3ab49c4",
                  "parentUUID": "c55c1718-7245-4826-97ad-5f23b2171208",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 259,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "4ca695ce-f8ba-444e-9322-9eaf1223fc81",
                  "parentUUID": "c55c1718-7245-4826-97ad-5f23b2171208",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c26254e-101e-437a-b672-406ae3ab49c4",
                "4ca695ce-f8ba-444e-9322-9eaf1223fc81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3326,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7030e053-a840-4d23-ac4e-2a0890dfba43",
            "7fe93e87-a374-4773-b421-cd2045158630",
            "e584e4ed-2e85-4e8a-8fa9-d57a6684e5a2",
            "76c6a1ff-02c3-4cd3-9c71-9ed01293e2ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4422,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3d937066-a036-4a4c-a6f4-f840326a5dc5",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/navigation.spec.js",
      "file": "cypress/integration/2-advanced-examples/navigation.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2264c0f2-9b6b-4f44-884d-2f45b5ae3dee",
          "title": "Navigation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 1681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation'); // clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation'); // clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "8f561a63-8721-421d-8e84-361560eeb88d",
              "parentUUID": "2264c0f2-9b6b-4f44-884d-2f45b5ae3dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 902,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload(); // reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "087ffbb9-791f-478c-b1db-2623f8fe41fd",
              "parentUUID": "2264c0f2-9b6b-4f44-884d-2f45b5ae3dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "2d984bca-89e5-4a65-9de0-578afba63fd5",
              "parentUUID": "2264c0f2-9b6b-4f44-884d-2f45b5ae3dee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f561a63-8721-421d-8e84-361560eeb88d",
            "087ffbb9-791f-478c-b1db-2623f8fe41fd",
            "2d984bca-89e5-4a65-9de0-578afba63fd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3224,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "47c530e2-b543-4eae-ae70-974c2f06cc76",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/network_requests.spec.js",
      "file": "cypress/integration/2-advanced-examples/network_requests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1062,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200); // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "e4272c34-0ef6-49e8-8676-44cc34d3d05e",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "e5e7ae81-2860-4e95-b618-a7c5a3d49f27",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "50233c0c-93fa-476c-b97e-ac37a78eb14b",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number'); // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n}) // note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  }); // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100); // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "1a21c557-e24e-4a49-835a-ab38cf866f03",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "79fb1419-ea85-4a67-bcf3-774e25437f0e",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist'; // Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]); // Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment'); // we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n}); // Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment'); // we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment'); // our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "792666cb-f3b6-40dc-8b5d-cd610853f4d7",
              "parentUUID": "80f24da0-aa3e-4601-be3e-d84a63dc3ccd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4272c34-0ef6-49e8-8676-44cc34d3d05e",
            "e5e7ae81-2860-4e95-b618-a7c5a3d49f27",
            "50233c0c-93fa-476c-b97e-ac37a78eb14b",
            "1a21c557-e24e-4a49-835a-ab38cf866f03",
            "79fb1419-ea85-4a67-bcf3-774e25437f0e",
            "792666cb-f3b6-40dc-8b5d-cd610853f4d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5124,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "630df47f-b00e-4b1f-9a46-22629df39717",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/querying.spec.js",
      "file": "cypress/integration/2-advanced-examples/querying.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
          "title": "Querying",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button'); //              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example'); // 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example'); // or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static'); // or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "00bcba48-e48b-4970-8b1e-88eebc7b76e4",
              "parentUUID": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third'); // we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first'); // passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "6c1a74df-9a5b-4682-8b30-ab8776063f5c",
              "parentUUID": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "b2010a4d-b561-41a0-9a11-c24f527bc336",
              "parentUUID": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "18bd7dcc-fe91-4c33-bb2c-b375747ee5e0",
              "parentUUID": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click(); // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click(); // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click(); // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click(); // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click(); // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click(); // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "be9274d4-69b3-4f99-ac0d-44d3efb9b01b",
              "parentUUID": "c7d70ae8-59c0-4988-baf6-e0b045a24b28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00bcba48-e48b-4970-8b1e-88eebc7b76e4",
            "6c1a74df-9a5b-4682-8b30-ab8776063f5c",
            "b2010a4d-b561-41a0-9a11-c24f527bc336",
            "18bd7dcc-fe91-4c33-bb2c-b375747ee5e0",
            "be9274d4-69b3-4f99-ac0d-44d3efb9b01b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1807,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b2c20f7e-c55a-427c-9a83-1fe3d22c17a1",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/spies_stubs_clocks.spec.js",
      "file": "cypress/integration/2-advanced-examples/spies_stubs_clocks.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7e302687-f266-4881-9f71-629cba915c9c",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "d20176fd-206b-438e-a3f7-800e1533d87c",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "3bca8d60-f825-4b44-b855-8cecbc04b113",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "3bb94bc7-b530-441d-a47c-415f205d2cf8",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click().should('have.text', '1489449600');",
              "err": {},
              "uuid": "d7039e4f-78f3-47a1-a6dd-4f1330ce3421",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click().should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click().should('have.text', '1489449610');",
              "err": {},
              "uuid": "7cc7e76a-63be-48f7-b25d-e80a18ab4022",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi'); // @ts-ignore\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice; // non-matched calls goes the actual method\n// @ts-ignore\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "5320f548-8445-43a6-94d9-ae2bbca1f1b6",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5); // if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3); // let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number); // alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3)); // match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3); // match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is event\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0; // expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\n\nconst isLessThan = limit => x => x < limit; // you can combine several matchers using \"and\", \"or\"\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3))); // matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3)); // you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "32855131-6b6d-49b4-bcb4-8bb5c35709b1",
              "parentUUID": "7e302687-f266-4881-9f71-629cba915c9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d20176fd-206b-438e-a3f7-800e1533d87c",
            "3bca8d60-f825-4b44-b855-8cecbc04b113",
            "3bb94bc7-b530-441d-a47c-415f205d2cf8",
            "d7039e4f-78f3-47a1-a6dd-4f1330ce3421",
            "7cc7e76a-63be-48f7-b25d-e80a18ab4022",
            "5320f548-8445-43a6-94d9-ae2bbca1f1b6",
            "32855131-6b6d-49b4-bcb4-8bb5c35709b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3838,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "70a26c35-5f71-4c46-be45-f5cb4bf3dbc2",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/traversal.spec.js",
      "file": "cypress/integration/2-advanced-examples/traversal.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
          "title": "Traversal",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "79219dbe-090f-4f22-a380-715c012c11bd",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "8ac4650f-576e-4a3e-9850-3cba68e74da0",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "48b38e04-d088-4a55-a680-28d9867ef880",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "d4847ed1-fd82-407a-adb3-f038cfa4c04f",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "37dc1195-27f6-49fe-99fa-3f6c9b6cd314",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "6759b34e-029b-412c-88d8-c88c5dc46c0f",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "f3d9819a-023f-43fd-a808-316457b5f41c",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "857f29cc-1e9b-4a64-97fe-e4a014630255",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "38474984-60a5-405f-b8df-33fe923b550d",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "be504256-3cd4-4925-958d-68ed90d08ce0",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "006a68f2-4cb0-4942-8e4d-37a0434fd7a4",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "76171390-aa02-4c08-9e62-adaaeec05425",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "82e3ef53-70dc-4a86-845f-2726f12d5652",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "0c6efc1d-f149-4584-8771-2e176f4d80e7",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "98a46341-e5f5-446a-957b-2ecaec905cbe",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "84cee886-8f44-42a5-a691-447a6ab1ff4f",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "28d68802-9e2b-461f-b6c2-719428af8285",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "7a19e8fc-e7c7-4f00-adea-50c928764041",
              "parentUUID": "5930dd19-70f2-41af-9cd4-afa593ebe50c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79219dbe-090f-4f22-a380-715c012c11bd",
            "8ac4650f-576e-4a3e-9850-3cba68e74da0",
            "48b38e04-d088-4a55-a680-28d9867ef880",
            "d4847ed1-fd82-407a-adb3-f038cfa4c04f",
            "37dc1195-27f6-49fe-99fa-3f6c9b6cd314",
            "6759b34e-029b-412c-88d8-c88c5dc46c0f",
            "f3d9819a-023f-43fd-a808-316457b5f41c",
            "857f29cc-1e9b-4a64-97fe-e4a014630255",
            "38474984-60a5-405f-b8df-33fe923b550d",
            "be504256-3cd4-4925-958d-68ed90d08ce0",
            "006a68f2-4cb0-4942-8e4d-37a0434fd7a4",
            "76171390-aa02-4c08-9e62-adaaeec05425",
            "82e3ef53-70dc-4a86-845f-2726f12d5652",
            "0c6efc1d-f149-4584-8771-2e176f4d80e7",
            "98a46341-e5f5-446a-957b-2ecaec905cbe",
            "84cee886-8f44-42a5-a691-447a6ab1ff4f",
            "28d68802-9e2b-461f-b6c2-719428af8285",
            "7a19e8fc-e7c7-4f00-adea-50c928764041"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3075,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b63f2431-b1f0-4c8d-972a-3fb3bceed3b5",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/utilities.spec.js",
      "file": "cypress/integration/2-advanced-examples/utilities.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "b88e3295-8313-4dcd-b912-a627715ad791",
              "parentUUID": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "6be09e42-e3c7-4823-a254-f65557c56470",
              "parentUUID": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    }); // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "c687cd81-826a-4cbe-9732-4a562e2ca486",
              "parentUUID": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false; // ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true; // whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "c2387be9-06c3-4bc7-8578-ca19e16e814d",
              "parentUUID": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  // @ts-ignore TS2351 (new Cypress.Promise)\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true; // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  // @ts-ignore TS7006\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "a04ac849-2401-4461-8fbf-a838394fdb51",
              "parentUUID": "d7a02ac8-50f0-4151-aeb7-f9a8ae343292",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b88e3295-8313-4dcd-b912-a627715ad791",
            "6be09e42-e3c7-4823-a254-f65557c56470",
            "c687cd81-826a-4cbe-9732-4a562e2ca486",
            "c2387be9-06c3-4bc7-8578-ca19e16e814d",
            "a04ac849-2401-4461-8fbf-a838394fdb51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3035,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "622847ce-0e7c-409f-9bbd-a888cde26011",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/viewport.spec.js",
      "file": "cypress/integration/2-advanced-examples/viewport.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cbbae9fe-0e38-4d58-b828-e28d5081a592",
          "title": "Viewport",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 3096,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480); // the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible'); // lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999); // cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200); // cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200); // The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.json)",
              "err": {},
              "uuid": "635ca093-9a8c-4837-a851-84bff8ccebbb",
              "parentUUID": "cbbae9fe-0e38-4d58-b828-e28d5081a592",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "635ca093-9a8c-4837-a851-84bff8ccebbb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3096,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "df5da0e0-42b9-4bb8-9e60-c57dd6b1165e",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/waiting.spec.js",
      "file": "cypress/integration/2-advanced-examples/waiting.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8fe82690-0a74-469d-86ae-4bc1e904abcd",
          "title": "Waiting",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 5097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "c82c242d-c568-41bc-81d2-56f6f97c7fcf",
              "parentUUID": "8fe82690-0a74-469d-86ae-4bc1e904abcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "8fe8f63b-111d-4c27-90df-7a29c3adaa0b",
              "parentUUID": "8fe82690-0a74-469d-86ae-4bc1e904abcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c82c242d-c568-41bc-81d2-56f6f97c7fcf",
            "8fe8f63b-111d-4c27-90df-7a29c3adaa0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5653,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7190b28e-a4d1-442c-8167-e9d13825ddf8",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/window.spec.js",
      "file": "cypress/integration/2-advanced-examples/window.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "930feaf0-e7e8-43a3-b3ca-649b6bf56642",
          "title": "Window",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 620,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "2d2459bc-a848-4361-9b6f-6ea499436666",
              "parentUUID": "930feaf0-e7e8-43a3-b3ca-649b6bf56642",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "3de82b66-2a86-49ea-8ec5-9a125d16f308",
              "parentUUID": "930feaf0-e7e8-43a3-b3ca-649b6bf56642",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "82c1b673-f06c-4d74-a837-1dd8d93db9f7",
              "parentUUID": "930feaf0-e7e8-43a3-b3ca-649b6bf56642",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d2459bc-a848-4361-9b6f-6ea499436666",
            "3de82b66-2a86-49ea-8ec5-9a125d16f308",
            "82c1b673-f06c-4d74-a837-1dd8d93db9f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 899,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a02be5ac-51bb-48b7-acf9-a00deafb3a01",
      "title": "",
      "fullFile": "cypress/integration/demotest.js",
      "file": "cypress/integration/demotest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "navigating to webiste",
          "fullTitle": "navigating to webiste",
          "timedOut": null,
          "duration": 29303,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "cy.login('32281206', 'etsops@gmail.com', 'mone2e!!');\ncy.wait(15000);\ncy.get('.le-tabs-primary>ul>li>span.tab-text').contains('text', 'My Conversations'); // cy.visit('https://authentication.liveperson.net/');\n// cy.get('#siteNumber').should('be.enabled');\n// cy.get('#siteNumber').type('abcd');\n// cy.get('#userName').type('xyz');\n// cy.get('#userName').should('have.id','userName');",
          "err": {
            "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `h3`, but never found it.",
            "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `h3`, but never found it.\n    at Context.eval (http://demo.guru99.com/__cypress/tests?p=cypress/support/index.js:131:16)",
            "diff": null
          },
          "uuid": "5a9b678e-9b3b-4c5b-a934-37866aa0c5a4",
          "parentUUID": "a02be5ac-51bb-48b7-acf9-a00deafb3a01",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [],
      "failures": [
        "5a9b678e-9b3b-4c5b-a934-37866aa0c5a4"
      ],
      "pending": [],
      "skipped": [],
      "duration": 29303,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "52502091-c96b-4f48-8ac0-80ddf7f3041f",
      "title": "",
      "fullFile": "cypress/integration/newTests.js",
      "file": "cypress/integration/newTests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3f92793-3224-4d8e-931e-b9b5474ae348",
          "title": "Login using fixtures",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login using Page object model",
              "fullTitle": "Login using fixtures Login using Page object model",
              "timedOut": null,
              "duration": 8154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login.website();\ncy.wait(5000);\nlogin.userName().type('mercury');\nlogin.password().type('mercury');\nlogin.signIn().click();\ncy.get('h3').should('contains.text', 'Login Successfully');",
              "err": {},
              "uuid": "b5c2a7a7-0b89-47d8-ad8c-09f41eadbd41",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login using custom commands",
              "fullTitle": "Login using fixtures Login using custom commands",
              "timedOut": null,
              "duration": 7075,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('mercury', 'mercury');\ncy.wait(5000);",
              "err": {},
              "uuid": "32c618a9-af48-450c-8eb9-2e1eb2bcaea4",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login using fixtures",
              "fullTitle": "Login using fixtures Login using fixtures",
              "timedOut": null,
              "duration": 5725,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login.website();\ncy.fixture('userDetails').then(user => {\n  cy.wait(3000);\n  login.userName().type(user.userName);\n  login.password().type(user.password);\n  login.signIn().click();\n});",
              "err": {},
              "uuid": "88a2013c-30fa-4340-9410-9d93c117d5df",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login using pom and fixtures",
              "fullTitle": "Login using fixtures Login using pom and fixtures",
              "timedOut": null,
              "duration": 1997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login.website();\nlogin.userName().type(this.user.userName);\nlogin.password().type(this.user.password);\nlogin.signIn().click();",
              "err": {},
              "uuid": "175e246a-baec-481c-be9b-f07fbd587ea8",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Loop the table using each",
              "fullTitle": "Login using fixtures Loop the table using each",
              "timedOut": null,
              "duration": 9808,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('mercury', 'mercury');\ncy.wait(5000);\ncy.get('table>tbody>tr>td>a').each(($el, index, $list) => {\n  cy.log('Each individual element' + $el.text());\n  cy.log('List of elements' + $list.text());\n  if ($el.text().includes('Flights')) {\n    cy.wait(2000);\n    cy.xpath(\"//a[normalize-space()='Flights']\").click();\n    cy.get(\"img[src='images/mast_flightfinder.gif']\").should('be.visible');\n  } else {\n    cy.log('Not clicked on:' + $el.text());\n  }\n});",
              "err": {},
              "uuid": "7aa8a0b9-9c31-44a0-b2a2-fcee65f05fb4",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DropDown and Radio buttons",
              "fullTitle": "Login using fixtures DropDown and Radio buttons",
              "timedOut": null,
              "duration": 10949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login('mercury', 'mercury');\ncy.wait(5000);\ncy.get('table>tbody>tr>td>a').each(($el, index, $list) => {\n  cy.log('Each individual element' + $el.text());\n  cy.log('List of elements' + $list.text());\n  if ($el.text().includes('Flights')) {\n    cy.wait(2000);\n    cy.xpath(\"//a[normalize-space()='Flights']\").click();\n    cy.get(\"img[src='images/mast_flightfinder.gif']\").should('be.visible');\n  } else {\n    cy.log('Not clicked on:' + $el.text());\n  }\n});\ncy.get(\"select[name='fromPort']\").select('San Francisco');\ncy.get(\"select[name='fromMonth']\").select('February');\ncy.get(\"input[name='findFlights']\").click();",
              "err": {},
              "uuid": "73d7b182-d55f-496b-b2bf-1c67c3eeb022",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Loop through table 2",
              "fullTitle": "Login using fixtures Loop through table 2",
              "timedOut": null,
              "duration": 60871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://testautomationpractice.blogspot.com/');\ncy.wait(5000);\ncy.get('table > tbody > tr> td:nth-child(2)').each((el, index) => {\n  const text = el.text();\n  if (text.includes('Amod')) {\n    cy.get('table > tbody > tr> td:nth-child(3)').eq(index);\n    cy.get('table > tbody > tr> td:nth-child(1)').eq(index);\n  }\n});",
              "err": {},
              "uuid": "44161671-35fd-434d-adfb-be2d0a509d1c",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting values from table",
              "fullTitle": "Login using fixtures Getting values from table",
              "timedOut": null,
              "duration": 6201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login.website();\ncy.wait(5000);\ncy.get('table > tbody > tr> td> font').each((el, index, list) => {\n  if (el.text().includes('Atlanta')) {\n    cy.log(cy.xpath(\"//b[normalize-space()='$398']\"));\n    cy.xpath(\"//b[normalize-space()='$398']\").should('contains.text', '$398');\n  }\n});",
              "err": {},
              "uuid": "bf66e070-d5f6-42d2-a5fd-917ae4088d1e",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Write File",
              "fullTitle": "Login using fixtures Write File",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.writeFile('sample.txt', 'Writing on sample file\\n');\ncy.writeFile('sample.txt', 'Second line', {\n  flag: 'a+'\n});\ncy.readFile('sample.txt').should('contains', 'Writing on sample ');",
              "err": {},
              "uuid": "c660ce5f-c366-4a0d-8ed5-478cadc3e857",
              "parentUUID": "a3f92793-3224-4d8e-931e-b9b5474ae348",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5c2a7a7-0b89-47d8-ad8c-09f41eadbd41",
            "32c618a9-af48-450c-8eb9-2e1eb2bcaea4",
            "88a2013c-30fa-4340-9410-9d93c117d5df",
            "175e246a-baec-481c-be9b-f07fbd587ea8",
            "7aa8a0b9-9c31-44a0-b2a2-fcee65f05fb4",
            "73d7b182-d55f-496b-b2bf-1c67c3eeb022",
            "44161671-35fd-434d-adfb-be2d0a509d1c",
            "bf66e070-d5f6-42d2-a5fd-917ae4088d1e",
            "c660ce5f-c366-4a0d-8ed5-478cadc3e857"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110818,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aa46125d-0503-4cd5-a7de-3cfdb75d781d",
      "title": "",
      "fullFile": "cypress/integration/uitests.js",
      "file": "cypress/integration/uitests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae3f838e-64ec-4518-9dbc-5dab20b7cf4b",
          "title": "Writing UI Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Navigating to website",
              "fullTitle": "Writing UI Tests Navigating to website",
              "timedOut": null,
              "duration": 16494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login.website();\ncy.viewport('macbook-15');\ncy.wait(15000); // cy.log(\"In Amazon\")\n// cy.get('#a-autoid-0').click()\n//Browser actions\n// cy.go('back')\n// cy.go('forward')\n// cy.reload()\n// cy.url().should('contains','amazon')",
              "err": {},
              "uuid": "0d744c66-5863-4849-a904-af56fca97e9d",
              "parentUUID": "ae3f838e-64ec-4518-9dbc-5dab20b7cf4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search for something in amazon",
              "fullTitle": "Writing UI Tests Search for something in amazon",
              "timedOut": null,
              "duration": 401,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// login.search().type('PS4 Games')\n// login.suggestions().find('#issDiv3', { timeout: 5000 }).contains('ps4 games for kids 8-12').click()\n// cy.wait(3000)\n//  MouseOver actions\ncy.get('#nav-link-accountList-nav-line-1').trigger('mouseover');\ncy.get('#nav-flyout-ya-signin .nav-action-inner').click();\ncy.amazon('pnkashyap92@gmail.com', 'Amazon@123'); //Scroll function\n// cy.scrollTo('center')\n// cy.xpath('//img[@class=\"s-image\"]').click()\n// cy.get('.s-no-outline .s-image').should('have.length.greaterThan',2)\n// cy.get('.s-no-outline .s-image').should('have.length',30)\n// cy.get('.s-no-outline .s-image').should('contain.text','Spider-Man: Game of The Year Edition - PlayStation 4')\n//cy.get('.s-no-outline .s-image').first().click()\n// cy.xpath(\"//span[@class='a-size-medium a-color-base a-text-normal']\").each((element,index,listOfelments)=>{\n//     cy.log(element.text())\n//     cy.log(listOfelments.length)\n//     if(index == 4){\n//         element.click()\n//     }\n// })\n//  expect(length).to.be.eql(31)\n// })",
              "err": {
                "message": "TypeError: cy.amazon is not a function",
                "estack": "TypeError: cy.amazon is not a function\n    at Context.eval (http://demo.guru99.com/__cypress/tests?p=cypress/integration/uitests.js:21384:8)",
                "diff": null
              },
              "uuid": "a52852f6-5acb-4749-8447-bfe6295ca236",
              "parentUUID": "ae3f838e-64ec-4518-9dbc-5dab20b7cf4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d744c66-5863-4849-a904-af56fca97e9d"
          ],
          "failures": [
            "a52852f6-5acb-4749-8447-bfe6295ca236"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16895,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}